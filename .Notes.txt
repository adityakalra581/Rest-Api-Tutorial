Reference: https://www.youtube.com/playlist?list=PLL2hlSFBmWwzrhahyQscxASc3ZQFh95xl

Github Repository: https://github.com/bradtraversy/flask_sqlalchemy_rest


Basic rest api creation and it's testing using Postman
Api is created in flask and the link is posted in the query section of 
postman gui.

Uptill now 3 methods have been created:
1. get
2. post
3. delete


********************************
********    27 feb: 12:19pm*****************
Developing a fully independent Restful Api for Login:

Reference: https://youtu.be/PTZiDnuC86g


Using:
1. flask_sqlalchemy:

pip install Flask-SQLAlchemy
reference: https://flask-sqlalchemy.palletsprojects.com/en/2.x/

2. flask_marshmallow:

pip install flask-marshmallow
reference: https://flask-marshmallow.readthedocs.io/en/latest/

3. Connecting sqlalchemy and marshmallow:

pip install marshmallow-sqlalchemy

TIP: Dont follow the tutorial blindly
     read the errors and rectify those accordingly.

1. app.py: 

- can post data and fetch it accordingly.   ## def add_login(): # method = POST

- can get login(Specific for specific id).  ## def get_logins(): # method = GET

- can get all the logins (Everything in the database.)    ## def get_logins(): # method = GET

- can update the login using unique id.     ## def update_login(): # method = PUT

- can delete the login.                     ## def delete_login(): # method = DELETE

*******************

Using Postman to test api:

1. Download and install it: i have directly installed it from the store in ubuntu.

2. Need to create a request therefore and paste the url of flask server.

3. then use the method like GET,POST,DELETE and so on.

*****************************************
 
SQLAlchemy Commands refer this:

## Important: always runthese commands in python.

 reference: https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/#deleting-records

 for eg: 

 1. Initiate Virtual environment using:

 source Project/env_name/bin/activate

 2. cd into the directory of the main script.

 cd Project/Rest-Api-Tutorial/Rest_api

##### Then just follow the below steps:

(my-project-env) devtron@Vostro:~/Project/Rest-Api-Tutorial/Rest_api$ python
Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from app import db
# app here is main script: app.py and db the database instance created.

>>> from app import Login
# Login here is main class
# we are importing those methods inside the python environment.

>>> user= Login.query.all()
>>> user
[<Login 1>, <Login 2>, <Login 4>]
>>> user[0]
<Login 1>

>>> aditya = Login.query.filter_by(name='Aditya Kalra').first()
>>> aditya.id
1
>>> aditya.name
'Aditya Kalra'
>>> aditya.email
'adityakalra667@gmail'
>>> aditya.password
'rajaji'
>>> x = Login.query.filter_by(id=2).first()
>>> x
<Login 2>
>>> x.email
'jadugar@junglebook'
>>> x.name
'MOWGLI'
>>> 
******************************************************************

requirements.txt:


- It contains all the packages which is required for this project.

- Important whenever you are working on a team.

- pushed on github and the other team member can use it.

command for using it:

pip install -u requirements.txt

How to create it:

1. Go inside the project directory.
2. Use command:

pip freeze >requirements.txt

this will create a requirements.txt and it will look something like this:

aniso8601==8.0.0
bcrypt==3.1.7
certifi==2019.11.28
cffi==1.14.0
chardet==3.0.4
Click==7.0
Flask==1.1.1
Flask-Bcrypt==0.7.1
Flask-Login==0.5.0
flask-marshmallow==0.11.0
Flask-RESTful==0.3.8
Flask-SQLAlchemy==2.4.1
Flask-WTF==0.14.3
idna==2.9
itsdangerous==1.1.0
Jinja2==2.11.1
MarkupSafe==1.1.1
marshmallow==3.5.0
marshmallow-sqlalchemy==0.22.2
pkg-resources==0.0.0
pycparser==2.19
pytz==2019.3
requests==2.23.0
six==1.14.0
SQLAlchemy==1.3.13
urllib3==1.25.8
Werkzeug==1.0.0
WTForms==2.2.1



********************************